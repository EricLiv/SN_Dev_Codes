// Create a Business Rule to not allow Incidents to be resolved if Incident tasks are open

Table = incident, Advanced = checked, When = before, Update = checked, Filter Condition = State Changes to Resolved

(function executeRule(current, previous /*null when async*/ ) {

    // Add your code here
    var grIncTsk = new GlideRecord('incident_task'); // target incident tasks
    grIncTsk.addQuery('incident', current.sys_id); // on current incident
    grIncTsk.addQuery('active', true); // if tasks are still active
    grIncTsk.query();
    if (grIncTsk.next()) {
        gs.addErrorMessage("Incidents cannot be resolved until ALL incident tasks are closed or resolved!"); // print message
            //current.state = previous.state; // reset state change
            current.incident_state = previous.incident_state; // reset state change
            current.setAbortAction(true); // cancel change
    }

})(current, previous);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Capture RITM Variable Changes in the Activity Log

create a before BR on the Options table <sc_item_options>

this should ONLY run on an update with a condition of Value changes


check the advanced check box and put in the following script...

 if (previous.value != current.value){

            var var_owner = new GlideRecord('sc_item_option_mtom');

            var_owner.addQuery('sc_item_option',current.sys_id);

            var_owner.query();

            if (var_owner.next()){

                    var itm = new GlideRecord('sc_req_item');

                    itm.addQuery('sys_id', var_owner.request_item);

                    itm.query();

                    if (itm.next()){

                          itm.comments = 'Variable updated: ' + '"' +  current.item_option_new.getDisplayValue() + '"' + '<br/><br/>' + 
                          ' Value changed FROM: ' + getValues(previous.value,current.item_option_new) + '<br/><br/>' + ' TO: ' + 
                          getValues(current.value,current.item_option_new) + '<br/><br/>' + ' By ' + gs.getUserName();

//itm.description = 'test';

                          itm.update();

                  }          

            }

    }

function getValues(q_value,q_sid){

    var answer = '';

    qc = new GlideRecord('question_choice');

    qc.addQuery('question',q_sid);

    qc.addQuery('value',q_value);

    qc.query();

    if (qc.next()){

            answer = qc.text.toString();

            return answer;

  }

  else{return q_value;}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Add SCTASK Assigned_to to RITM Watch List

 Business Rule:
Table: Catalog Task [sc_task]
Active and Advanced
After, Insert and Update
Conditions: Assigned_to changes, and Assigned_to is not empty
Advance - Script:
(function executeRule(current, previous /*null when async*/ ) {

    // Add your code here

    var ritm = current.request_item.getRefRecord();
    var wlArr = ritm.watch_list.toString().split(',');
    var idx = wlArr.indexOf(previous.assigned_to.toString()); //get index of sys_id of user you want to remove from watch list
    wlArr.splice(idx, 1); //Remove the specific user from array. idx is the index from which you want to remove and '1' is the number of elements you want to remove.
    wlArr.push(current.assigned_to.toString());
    ritm.watch_list = wlArr.join();
    ritm.update();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
